// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Sample

import java.nio.*
import com.google.flatbuffers.*

class Weapon : Table() {
    fun __init(_i: Int, _bb: ByteBuffer) {
        bb_pos = _i
        bb = _bb
    }

    fun __assign(_i: Int, _bb: ByteBuffer): Weapon {
        __init(_i, _bb)
        return this
    }

    fun name(): String? {
        val o = __offset(4)
        return if (o != 0) __string(o + bb_pos) else null
    }

    fun nameAsByteBuffer(): ByteBuffer? {
        return __vector_as_bytebuffer(4, 1)
    }

    fun damage(): Short {
        val o = __offset(6)
        return if (o != 0) bb.getShort(o + bb_pos) else 0
    }

    fun mutateDamage(damage: Short): Boolean {
        val o = __offset(6)
        if (o != 0) {
            bb.putShort(o + bb_pos, damage)
            return true
        } else {
            return false
        }
    }

    companion object {
        @JvmOverloads
        fun getRootAsWeapon(_bb: ByteBuffer, obj: Weapon = Weapon()): Weapon {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)
        }

        fun createWeapon(builder: FlatBufferBuilder,
                         nameOffset: Int,
                         damage: Short): Int {
            builder.startObject(2)
            Weapon.addName(builder, nameOffset)
            Weapon.addDamage(builder, damage)
            return Weapon.endWeapon(builder)
        }

        fun startWeapon(builder: FlatBufferBuilder) {
            builder.startObject(2)
        }

        fun addName(builder: FlatBufferBuilder, nameOffset: Int) {
            builder.addOffset(0, nameOffset, 0)
        }

        fun addDamage(builder: FlatBufferBuilder, damage: Short) {
            builder.addShort(1, damage, 0)
        }

        fun endWeapon(builder: FlatBufferBuilder): Int {
            return builder.endObject()
        }
    }
}